{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "This resource has been designed for teachers and students, but is open and encouraged for anyone to use & adapt."
      ],
      "metadata": {
        "id": "f1qZ3Fckiw7b"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Getting Started with Using Jupyter Notebooks in the Classroom (Higher)\n",
        "\n",
        "Jupyter notebooks are very useful tools when teaching Python, as well as in many modern industrys.\n",
        "\n",
        "Jupyter notebooks are designed to allow you to run code, with instructions, notes, hints, tables and such mixed amongst it. The programme developed also allows for teaching computing classes how to use Git, GitHub and Google Colab - which are very popular tools used by many Fortune 500 companys when it comes to developing software.\n",
        "\n",
        "This entrire course will be made avaliable openly at https://github.com/whizbangpop/higher-computing-notebooks once the course has been fully transferred and tested as Jupyter notebooks. The original coursework was developed by Prestwick Academy, Robert Gordons College, and the SQA. All rights are reserved to their original owners.\n",
        "\n",
        "Some sections of the course have been altered to allow them to be completed inside of notebooks, such as wording or how tasks are completed."
      ],
      "metadata": {
        "id": "krslmkiGZ6jQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Basic Overview\n",
        "\n",
        "In a Jupyter Notebook, you can define a variable, function or subroutine anywhere whithin a notebook, and it is accessable from anywhere in the notebook. As Jupyter uses Python as it's code enviroment, the same rules still apply.\n",
        "\n",
        "Local & Global variables still work the same way, and *actual* and *formal* variables still work the same way.\n",
        "\n",
        "Look at this demo below to show how this can be used in action. To execute a code block (in Google Colab) press the small play button next to the code to execute it."
      ],
      "metadata": {
        "id": "0Ql2vQIIb9GZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "number = 17"
      ],
      "metadata": {
        "id": "eIpQ5g7cclIc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we have defined a variable called number, this is now accessable to any function or section of code anywhere inside of this notebook."
      ],
      "metadata": {
        "id": "LqDrDUXscnyu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def my_subroutine(x):\n",
        "  my_number = x + 10\n",
        "  print(my_number)"
      ],
      "metadata": {
        "id": "OIZjEo6Icw5N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "You may notice that when you execute the code block above, nothing happens. This is because we are still using Python. When you execute a code block in a Jupyter notebook, it's almost like saving a new section to a Python file.\n",
        "\n",
        "We never actually called the subroutine, we just defined it. We would have to either call the subroutine in the code block or call it in another code block. \n",
        "\n",
        "Have a go and call the `my_subroutine` subroutine in that code block above, passing in the variable `number` we initialised earlier for `x`.\n",
        "\n",
        "To edit a code block (in Google Colab), double click it, and edit the code as per required. Then press `Esc`, then execute the code block again. This undoes what the previous execution did, and re runs it as if it had never been executed before."
      ],
      "metadata": {
        "id": "SB3Ban8Yc9qO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Important Notes"
      ],
      "metadata": {
        "id": "BMsmegrOd7pY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Initialsing Variables\n",
        "\n",
        "The thing to remember when using notebooks, is that if you don't run the code block that initalises or updates a variable, it doesn't exist! If you get a runtime error, the first thing you would want to check is that you initalised all variables. Here's an example of this in action. You don't need to do anything for this, the code has been set up this way."
      ],
      "metadata": {
        "id": "0TNUQNZBfErg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_number = 17"
      ],
      "metadata": {
        "id": "YLyaYj0yeTGI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(my_number)"
      ],
      "metadata": {
        "id": "qa2wrQGZeXYU",
        "outputId": "8e1162e4-9e21-43f6-b219-6396d5def7e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-ffda4128376a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmy_number\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'my_number' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As you can see, because we didn't execute the first block, when we went to print the variable, Python threw an error as it was trying to read a variable that doesn't exist yet.\n",
        "\n",
        "Go back, execute the first code block, then try and execute the second code block again. It should now work properly."
      ],
      "metadata": {
        "id": "saeoApi_ecVX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Saving Your Work\n",
        "\n",
        "Google Colab does not automatically save your progress as you work through your notebook. You have two options for saving your work, either in Google Drive through your Google account, or via GitHub. If you went through the first section of the PowerPoint, you should have setup a GitHun account. We are going to save our work there.\n",
        "\n",
        "When you are done, you will want to goto: `File > Save a copy in GitHub`. It may ask you to log in again. If you haven't already, create a new repository in GitHub, we will save our work there. If you created a new repository just now, close the menu and reopen it. You will want to open the dropdown menu and select your chosen repository if it is not already chosen.\n",
        "\n",
        "If you choose (I would reccomend), you can check the option to \"Include a link to Colaboratory\". All this does is add a small button at the top of your notebook to provide quick access to **that** notebook, not the one cloned from the source repository."
      ],
      "metadata": {
        "id": "u1_XZAKve-6M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Comments, Feedback and Contact\n",
        "\n",
        "If you have any further suggestions, tips, tricks, comments or there is something wrong in this notebook or any other, please email me at [jupyter-feedback@sommer.anonaddy.com](mailto:jupyter-feedback@sommer.anonaddy.com) and I'll try get to you as soon as I can. You may not get a response depending on what it is, but I endeavour to try and respond to all.\n",
        "\n",
        "These notebooks can and will update periodically, without requirement of notice. "
      ],
      "metadata": {
        "id": "RbhwYgaMgemO"
      }
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "toc_visible": true,
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
